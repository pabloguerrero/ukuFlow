options{  LOOKAHEAD= 2;  // CHOICE_AMBIGUITY_CHECK = 2;  //OTHER_AMBIGUITY_CHECK = 1;  STATIC = false;  DEBUG_PARSER = false;  DEBUG_LOOKAHEAD = false;  DEBUG_TOKEN_MANAGER = false;  ERROR_REPORTING = true;  JAVA_UNICODE_ESCAPE = false;  UNICODE_INPUT = true;  IGNORE_CASE = true;  USER_TOKEN_MANAGER = false;  USER_CHAR_STREAM = false;  BUILD_PARSER = true;  BUILD_TOKEN_MANAGER = true;  SANITY_CHECK = true;  //FORCE_LA_CHECK = false;}PARSER_BEGIN(ukuFlowScript)package de.tudarmstadt.dvs.ukuflow.script.generalscript;import de.tudarmstadt.dvs.ukuflow.script.generalscript.expression.*;import de.tudarmstadt.dvs.ukuflow.script.generalscript.functions.*;import de.tudarmstadt.dvs.ukuflow.tools.debugger.BpmnLog;import de.tudarmstadt.dvs.ukuflow.tools.exception.InvalidRepositoryNameException;//import java.util.LinkedList;import java.util.*;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.ByteArrayInputStream;import java.io.UnsupportedEncodingException;import java.io.InputStream;public class ukuFlowScript{  // private static boolean log.debug_phase = true;  //private static boolean log.info_phase = true;  private static ukuFlowScript INSTANCE = null;  //private List < String > errors = new LinkedList < String > ();  // private List < String > variables = new LinkedList < String > ();  private static BpmnLog log = BpmnLog.getInstance(ukuFlowScript.class.getSimpleName());  public static ukuFlowScript getInstance(String text)  {    InputStream is = null;    try    {      is = new ByteArrayInputStream(text.getBytes("UTF-8"));    }    catch (UnsupportedEncodingException e)    {      e.printStackTrace();    }    if (INSTANCE == null) INSTANCE = new ukuFlowScript(is);    else INSTANCE.ReInit(is);    //INSTANCE.errors = new LinkedList < String > ();    //INSTANCE.variables = new LinkedList < String > ();    return INSTANCE;  }  public List < TaskScriptFunction > parseTaskScript() throws ParseException  {    return INSTANCE.taskScript();  }  /**  * parse condition in a sequenceFlow  */  public UkuExpression parseCondition() throws ParseException  {    return INSTANCE.conditionalExpression();  }  public static void main(String args []) throws ParseException  {    String fileName = "bool.txt";    try    {      INSTANCE = new ukuFlowScript(new FileInputStream(fileName));    }    catch (FileNotFoundException e1)    {      e1.printStackTrace();    }    log.debug("testbegin");    //parser.conditionalExpression();    //log.debug(parser.computationalExpression());    // log.debug(parser.taskScript());    //LocalFunction lf = parser.localFunction();    //log.debug(lf + "\ntestdone");    log.debug(INSTANCE.scopeExpression());    log.debug("numberof variable " + VariableManager.getInstance().getVariables().size());    log.debug("- > " + VariableManager.getInstance().getVariables());    log.debug("testdone");  }}PARSER_END(ukuFlowScript)SKIP :{  " "| "\n"| "\t"| "\r"}TOKEN : /* binary logical operators */{  < AND :    (      "AND"    | "&"    | "&&"    ) >| < OR :    (      "OR"    | "|"    | "||"    ) >}/*< XOR :    (      "XOR"    | "^"    ) >}*/TOKEN : /* Unary logical operator */{  < NOT :    (      "NOT"    | "~"    ) >}TOKEN :{  < ADDITIVE :    (      "+"    | "-"    ) >}TOKEN : /* BOOLEAN */{  < BOOLEAN :    (      < TRUE >    | < FALSE >    ) >| < #TRUE :    (      "TRUE"    | "true"    ) >| < #FALSE :    (      "FALSE"    | "false"    ) >}TOKEN :{  < AT_ : "@" >| < SCOPE_DESC : "SCOPE" >}TOKEN :{  < LOCAL : "local" >| < SCOPE : < AT_ > < IDENTIFIER > >}TOKEN :{  < VARIABLE : "$" < IDENTIFIER > >}TOKEN : /* LITERALS */{  < INTEGER_LITERAL :    < DECIMAL_LITERAL > ([ "l", "L" ])?  | < HEX_LITERAL > ([ "l", "L" ])? //| < OCTAL_LITERAL > ([ "l", "L" ])?     >| < #DECIMAL_LITERAL : [ "0"-"9" ] ([ "0"-"9" ])* >| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >  //|   //  < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >}TOKEN : /* IDENTIFIERS */{  < IDENTIFIER :    (      < LETTER >    | "_"    )    (      < LETTER >    | < DIGIT >    | "_"    )* >| < #LETTER : [ "\u0024", "\u0041"-"\u005a", "\u005f", "\u0061"-"\u007a", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff" ] >| < #DIGIT : [ "\u0030"-"\u0039", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049" ] >}TOKEN : /* Comparision operators */{  < EQUAL : "==" >| < UNEQUAL : "!=" >| < GREATERTHAN : ">" >| < LESSTHAN : "<" >| < GREATEROREQUAL : ">=" >| < LESSOREQUAL : "<=" >}TOKEN :{  < STRING :    (      < IDENTIFIER >    | "_"    | "-"    )+ >}/* ultimate function for parsing all type of expression */void mainFunction() :{}{  (    taskScript()  | ConditionalOrFunction()  )  < EOF >}/*** for parsing conditional expression*/UkuExpression conditionalExpression() :{  UkuExpression result = null;}{  result = ConditionalOrFunction()  {    log.debug(result);  }  < EOF >  {    return result;  }}/** * for parsing task script */List < TaskScriptFunction > taskScript() :{  List < TaskScriptFunction > result = new LinkedList < TaskScriptFunction > ();  TaskScriptFunction tmp = null;}{  (    tmp = localFunction()    {      result.add(tmp);    }  | tmp = scopeFunction()    {      result.add(tmp);    }  | tmp = computationFunction()    {      result.add(tmp);    }  )*  < EOF >  {    return result;  }}LocalFunction localFunction() :{  UkuVariable variable = null;  String function_name = "";  UkuExpression tmp;  List < UkuExpression > params = new LinkedList < UkuExpression > ();  LocalFunction lf;}{  < LOCAL >  [    // LOOKAHEAD(< IDENTIFIER > "=")    < IDENTIFIER >    {      String v = token.image.trim();      variable = new UkuVariable(v);    }    "="  ]  < IDENTIFIER >  {    function_name = token.image.trim();  }  params = parseParamsList() ";"  {    lf = new LocalFunction(variable, function_name, params);    return lf;  }}ScopeFunction scopeFunction() :{  UkuExpression tmp = null;  String scopeName = "";  String functionName = "";  List < UkuExpression > params = new LinkedList < UkuExpression > ();}{  < SCOPE >  {    scopeName = token.image.trim().substring(1);    log.debug(scopeName);  }  < IDENTIFIER >  {    functionName = token.image.trim();  }  params = parseParamsList() ";"  { //TODO:    return new ScopeFunction(scopeName, functionName, params);  }}/*** parser for computation function. It can handle: +,-,*,/,%,^,*/ComputationalFunction computationFunction() :{  UkuExpression exp = null;  String variable = "";}{  < IDENTIFIER >  {    variable = token.image.trim();  }  "=" exp = computationalExpression() ";"  {    return new ComputationalFunction(variable, exp);    log.debug(exp);  }}/*** this function will parse all possible parameter in a scope- and local- function*/List < UkuExpression > parseParamsList() :{  List < UkuExpression > params = new LinkedList < UkuExpression > ();  UkuExpression tmp = null;}{  (    (      < IDENTIFIER >    | < STRING >    )    {      params.add(new UkuString(token.image.trim()));      log.info(token.image.trim());    }  | tmp = NumberOrVariable()    {      params.add((PrimaryExpression) tmp);    }  )*  {    return params;  }}UkuExpression ConditionalOrFunction() :{  UkuExpression result = null, exp1 = null, exp2 = null;}{  exp1 = ConditionalAndFunction()  (    < OR > exp2 = ConditionalAndFunction()    {      if (result != null) exp1 = result;      result = new BinaryLogicalExpression(LogicalExpression.OR);      ((BinaryLogicalExpression) result).setOperand1(exp1);      ((BinaryLogicalExpression) result).setOperand2(exp2);    }  )*  {    if (result == null) result = exp1;    return result;  }}UkuExpression ConditionalAndFunction() :{  UkuExpression result = null, exp1 = null, exp2 = null;}{  exp1 = ConditionalNotFunction()  {    log.debug("condionalAndFunciton" + exp1);  }  (    < AND > exp2 = ConditionalNotFunction()    {      if (result != null) exp1 = result;      result = new BinaryLogicalExpression(LogicalExpression.AND);      ((BinaryLogicalExpression) result).setOperand1(exp1);      ((BinaryLogicalExpression) result).setOperand2(exp2);      {        log.debug(exp1 + "/" + exp2);      }    }  )*  {    if (result == null) result = exp1;    return result;  }}/*UkuExpression ConditionalXorFunction() :{  UkuExpression result = null, exp1 = null, exp2 = null;}{  exp1 = ConditionalNotFunction()  (    < XOR > exp2 = ConditionalNotFunction()    {      if (result != null) exp1 = result;      result = new BinaryLogicalExpression(-1);      ((BinaryLogicalExpression) result).setOperand1(exp1);      ((BinaryLogicalExpression) result).setOperand2(exp2);    }  )*  {    if (result == null) result = exp1;    return result;  }}*/UkuExpression ConditionalNotFunction() :{  UkuExpression result = null, exp1 = null;}{  < NOT > exp1 = ConditionalPrimaryFunction()  {    result = new UnaryLogicalExpression(LogicalExpression.NOT);    ((UnaryLogicalExpression) result).setOperand(exp1);    return result;  }| result = ConditionalPrimaryFunction()  {    return result;  }}UkuExpression ConditionalPrimaryFunction() :{  UkuExpression result = null;}{  //  LOOKAHEAD(3)  < BOOLEAN >  {    return new UkuConstant(token.image);  }| result = ConditionalRelationalFunction()  {    return result;  }| "(" result = tmp() ")"  {    return result;  }}UkuExpression tmp() :{  UkuExpression result = null;}{  LOOKAHEAD(ConditionalOrFunction())  result = ConditionalOrFunction()  {    return result;  }| result = ConditionalRelationalFunction()  {    return result;  }}UkuExpression ConditionalRelationalFunction() :{  UkuExpression result = null, exp1 = null, exp2 = null;  int operator = 0;}{  exp1 = computationalExpression()  (    < EQUAL >  | < UNEQUAL >  | < GREATERTHAN >  | < LESSTHAN >  | < GREATEROREQUAL >  | < LESSOREQUAL >  )  {    if (token.image.equals("==")) operator = ComparisonExpression.EQUAL;    if (token.image.equals(">")) operator = ComparisonExpression.GREATERTHAN;    if (token.image.equals("<")) operator = ComparisonExpression.LESSTHAN;    if (token.image.equals(">=")) operator = ComparisonExpression.GREATEROREQUAL;    if (token.image.equals("=<")) operator = ComparisonExpression.LESSOREQUAL;  }  exp2 = computationalExpression()  {    log.debug(exp1 + "/" + exp2);    result = new ComparisonExpression(operator, exp1, exp2);    return result;  }}/**void ConditionalPrimaryExpression() :{}{ computationalExpression()|  "(" ConditionalOrFunction() ")"}*//*** parser for local function: "local functionName parameter1 parameter2 ... ;*/UkuExpression computationalExpression() :{  UkuExpression exp1, exp2;  UkuExpression result = null;  int operator = 0;}{  exp1 = computationalMulExpression()  {    log.debug(token.image + ": " + exp1);  }  (    < ADDITIVE >    {      operator = token.image.equals("+") ? NumericalExpression.ADD : NumericalExpression.SUB;    }    exp2 = computationalMulExpression()    {      if (result != null) exp1 = result;      result = new BinaryNumericalExpression(operator);      ((BinaryNumericalExpression) result).setOperand1(exp1);      ((BinaryNumericalExpression) result).setOperand2(exp2);    }  )*  {    //log.debug(exp1 _    if (result == null) result = exp1;    return result;  }}UkuExpression computationalMulExpression() :{  int operator = 0;  UkuExpression exp1 = null, exp2 = null;  UkuExpression result = null;}{  exp1 = computationalUnaryExpression()  {    log.debug("computationalUnaryExpression " + token.image + ": " + exp1);  }  (    (      "*"    | "/"    | "%"    )    {      operator = token.image.equals("*") ? BinaryNumericalExpression.MUL : token.image.equals("/") ? BinaryNumericalExpression.DIV : BinaryNumericalExpression.MOD;    }    exp2 = computationalUnaryExpression()    {      if (result != null) exp1 = result;      result = new BinaryNumericalExpression(operator);      ((BinaryNumericalExpression) result).setOperand1(exp1);      ((BinaryNumericalExpression) result).setOperand2(exp2);    }  )*  {    if (result == null) result = exp1;    return result;  }}UkuExpression computationalUnaryExpression() :{  UkuExpression operand = null;  UkuExpression result = null;  int operator = 0;}{  < ADDITIVE >  {    log.debug("Minus");    operator = token.image.equals("-") ? NumericalExpression.MINUS : NumericalExpression.PLUS;  }  computationalPrimaryExpression()  {    result = new UnaryNumericalExpression(operator);    ((UnaryNumericalExpression) result).setOperand(operand);    return result;  }| result = computationalPrimaryExpression()  {    return result;  }}UkuExpression computationalPrimaryExpression() :{  UkuExpression result = null;}{  result = NumberOrVariable()  {    //log.debug("got here" + result);    return result;  }| "(" result = computationalExpression() ")"  {    return result;  }}UkuExpression NumberOrVariable() :{  UkuExpression result = null;}{  result = ConstantExpression()  {    return result;  }| < VARIABLE >  {    String var = token.image.trim();    //if (!variables.contains(var)) variables.add(var);    UkuVariable v = new UkuVariable(var);    return v;  }}UkuExpression ConstantExpression() :{  UkuConstant c = null;  UkuExpression result = null;}{  < INTEGER_LITERAL >  {    c = new UkuConstant(Integer.parseInt(token.image));    return c;  }| result = predefinedConstant()  {    return result;  }}UkuExpression predefinedConstant() :{}{  (    < IDENTIFIER >  | < STRING >  )  {    String tmp = token.image.trim();    try    {      UkuExpression result = new UkuRepositoryField(tmp);      return result;    }    catch (InvalidRepositoryNameException ie)    {      throw new ParseException();    }  }}/**for scope definition in textAnnotation*/UkuScopeExpression scopeExpression() :{  UkuScopeExpression result = null;  String sName = null;  Integer ttl =null;  UkuExpression sExp = null;}{  < SCOPE_DESC >  (    < IDENTIFIER >  | < STRING >  )  {    sName = token.image.trim();  }  [    < INTEGER_LITERAL >    {      ttl = Integer.parseInt(token.image);    }  ]  //< EOF >  "(" sExp = ConditionalOrFunction()  {    result = new UkuScopeExpression(sName, ttl, sExp);  }  ")" < EOF >  {    return result;  }}