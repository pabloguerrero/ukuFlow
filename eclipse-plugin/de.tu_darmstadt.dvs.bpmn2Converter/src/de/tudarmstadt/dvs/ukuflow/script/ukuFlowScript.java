/* Generated By:JavaCC: Do not edit this line. ukuFlowScript.java */
package de.tudarmstadt.dvs.ukuflow.script;
import de.tudarmstadt.dvs.ukuflow.script.expression.*;
import de.tudarmstadt.dvs.ukuflow.script.function.*;
import de.tudarmstadt.dvs.ukuflow.debugger.BpmnLog;
import java.util.LinkedList;
import java.util.List;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.ByteArrayInputStream;
import java.io.UnsupportedEncodingException;
import java.io.InputStream;

public class ukuFlowScript implements ukuFlowScriptConstants {
 // private static boolean log.debug_phase = true;
  //private static boolean log.info_phase = true;
  private static ukuFlowScript INSTANCE = null;

  private List < String > errors = new LinkedList < String > ();

  private List < String > variables = new LinkedList < String > ();
  private static BpmnLog log = BpmnLog.getInstance(ukuFlowScript.class.getSimpleName());
  public static ukuFlowScript getInstance(String text)
  {
    InputStream is = null;
    try
    {
      is = new ByteArrayInputStream(text.getBytes("UTF-8"));
    }
    catch (UnsupportedEncodingException e)
    {
      e.printStackTrace();
    }
    if (INSTANCE == null) INSTANCE = new ukuFlowScript(is);
    else INSTANCE.ReInit(is);
    INSTANCE.errors = new LinkedList < String > ();
    INSTANCE.variables = new LinkedList < String > ();
    return INSTANCE;
  }

  public List < TaskScriptFunction > parseTaskScript() throws ParseException
  {

      return INSTANCE.taskScript();

  }

  /**  * parse condition in a sequenceFlow  */
  public UkuExpression parseCondition() throws ParseException
  {

      return INSTANCE.conditionalExpression();

  }

  public static void main(String args[]) throws ParseException
  {
    String fileName = "bool.txt";
    try
    {
      INSTANCE = new ukuFlowScript(new FileInputStream(fileName));
    }
    catch (FileNotFoundException e1)
    {
      e1.printStackTrace();
    }
    log.debug("testbegin");
    //parser.conditionalExpression();    //log.debug(parser.computationalExpression());    // log.debug(parser.taskScript());    //LocalFunction lf = parser.localFunction();    //log.debug(lf + "\ntestdone");    log.debug(INSTANCE.parseTaskScript());
    log.debug("numberof variable " + VariableManager.getInstance().getVariables().size());
    log.debug("- > " + VariableManager.getInstance().getVariables());
    log.debug("testdone");
  }

/* ultimate function for parsing all type of expression */
  final public void mainFunction() throws ParseException {
    if (jj_2_1(2)) {
      taskScript();
    } else if (jj_2_2(2)) {
      ConditionalOrFunction();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(0);
  }

/*** for parsing conditional expression*/
  final public UkuExpression conditionalExpression() throws ParseException {
  UkuExpression result = null;
    result = ConditionalOrFunction();
    log.debug(result);
    jj_consume_token(0);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/** * for parsing task script */
  final public List < TaskScriptFunction > taskScript() throws ParseException {
  List < TaskScriptFunction > result = new LinkedList < TaskScriptFunction > ();
  TaskScriptFunction tmp = null;
    label_1:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_1;
      }
      if (jj_2_4(2)) {
        tmp = localFunction();
      result.add(tmp);
      } else if (jj_2_5(2)) {
        tmp = scopeFunction();
      result.add(tmp);
      } else if (jj_2_6(2)) {
        tmp = computationFunction();
      result.add(tmp);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public LocalFunction localFunction() throws ParseException {
  Variable variable = null;
  String function_name = "";
  UkuExpression tmp;
  List < UkuExpression > params = new LinkedList < UkuExpression > ();
  LocalFunction lf;
    jj_consume_token(LOCAL);
    if (jj_2_7(2)) {
      jj_consume_token(IDENTIFIER);
      String v = token.image.trim();
      variable = new Variable(v);
      jj_consume_token(30);
    } else {
      ;
    }
    jj_consume_token(IDENTIFIER);
    function_name = token.image.trim();
    params = parseParamsList();
    jj_consume_token(31);
    lf = new LocalFunction(variable, function_name, params);
    {if (true) return lf;}
    throw new Error("Missing return statement in function");
  }

  final public ScopeFunction scopeFunction() throws ParseException {
  UkuExpression tmp = null;
  String scopeName = "";
  String functionName = "";
  List < UkuExpression > params = new LinkedList < UkuExpression > ();
    jj_consume_token(SCOPE);
    scopeName = token.image.trim().substring(1);
    log.debug(scopeName);
    jj_consume_token(IDENTIFIER);
    functionName = token.image.trim();
    params = parseParamsList();
    jj_consume_token(31);
    //TODO:
    {if (true) return new ScopeFunction(scopeName, functionName, params);}
    throw new Error("Missing return statement in function");
  }

/*** parser for computation function. It can handle: +,-,*,/,%,^,*/
  final public ComputationalFunction computationFunction() throws ParseException {
  UkuExpression exp = null;
  String variable = "";
    jj_consume_token(IDENTIFIER);
    variable = token.image.trim();
    jj_consume_token(30);
    exp = computationalExpression();
    jj_consume_token(31);
    {if (true) return new ComputationalFunction(variable, exp);}
    log.debug(exp);
    throw new Error("Missing return statement in function");
  }

/*** this function will parse all possible parameter in a scope- and local- function*/
  final public List < UkuExpression > parseParamsList() throws ParseException {
  List < UkuExpression > params = new LinkedList < UkuExpression > ();
  UkuExpression tmp = null;
    label_2:
    while (true) {
      if (jj_2_8(2)) {
        ;
      } else {
        break label_2;
      }
      if (jj_2_11(2)) {
        if (jj_2_9(2)) {
          jj_consume_token(IDENTIFIER);
        } else if (jj_2_10(2)) {
          jj_consume_token(STRING);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      params.add(new UkuString(token.image.trim()));
      log.info(token.image.trim());
      } else if (jj_2_12(2)) {
        tmp = NumberOrVariable();
      params.add((PrimaryExpression) tmp);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return params;}
    throw new Error("Missing return statement in function");
  }

  final public UkuExpression ConditionalOrFunction() throws ParseException {
  UkuExpression result = null, exp1 = null, exp2 = null;
    exp1 = ConditionalAndFunction();
    label_3:
    while (true) {
      if (jj_2_13(2)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(OR);
      exp2 = ConditionalAndFunction();
      if (result != null) exp1 = result;
      result = new BinaryLogicalExpression(LogicalExpression.OR);
      ((BinaryLogicalExpression) result).setOperand1(exp1);
      ((BinaryLogicalExpression) result).setOperand2(exp2);
    }
    if (result == null) result = exp1;
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public UkuExpression ConditionalAndFunction() throws ParseException {
  UkuExpression result = null, exp1 = null, exp2 = null;
    exp1 = ConditionalXorFunction();
    log.debug("condionalAndFunciton" + exp1);
    label_4:
    while (true) {
      if (jj_2_14(2)) {
        ;
      } else {
        break label_4;
      }
      jj_consume_token(AND);
      exp2 = ConditionalXorFunction();
      if (result != null) exp1 = result;
      result = new BinaryLogicalExpression(LogicalExpression.AND);
      ((BinaryLogicalExpression) result).setOperand1(exp1);
      ((BinaryLogicalExpression) result).setOperand2(exp2);
      {
        log.debug(exp1 + "/" + exp2);
      }
    }
    if (result == null) result = exp1;
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public UkuExpression ConditionalXorFunction() throws ParseException {
  UkuExpression result = null, exp1 = null, exp2 = null;
    exp1 = ConditionalNotFunction();
    label_5:
    while (true) {
      if (jj_2_15(2)) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(XOR);
      exp2 = ConditionalNotFunction();
      if (result != null) exp1 = result;
      result = new BinaryLogicalExpression(LogicalExpression.XOR);
      ((BinaryLogicalExpression) result).setOperand1(exp1);
      ((BinaryLogicalExpression) result).setOperand2(exp2);
    }
    if (result == null) result = exp1;
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public UkuExpression ConditionalNotFunction() throws ParseException {
  UkuExpression result = null, exp1 = null;
    if (jj_2_16(2)) {
      jj_consume_token(NOT);
      exp1 = ConditionalPrimaryFunction();
    result = new UnaryLogicalExpression(LogicalExpression.NOT);
    ((UnaryLogicalExpression) result).setOperand(exp1);
    {if (true) return result;}
    } else if (jj_2_17(2)) {
      result = ConditionalPrimaryFunction();
    {if (true) return result;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public UkuExpression ConditionalPrimaryFunction() throws ParseException {
  UkuExpression result = null;
    if (jj_2_18(2)) {
      jj_consume_token(BOOLEAN);
    {if (true) return new ukuConstant(token.image);}
    } else if (jj_2_19(2)) {
      result = ConditionalRelationalFunction();
    {if (true) return result;}
    } else if (jj_2_20(2)) {
      jj_consume_token(32);
      result = tmp();
      jj_consume_token(33);
    {if (true) return result;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public UkuExpression tmp() throws ParseException {
  UkuExpression result = null;
    if (jj_2_21(2147483647)) {
      result = ConditionalOrFunction();
    {if (true) return result;}
    } else if (jj_2_22(2)) {
      result = ConditionalRelationalFunction();
    {if (true) return result;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public UkuExpression ConditionalRelationalFunction() throws ParseException {
  UkuExpression result = null, exp1 = null, exp2 = null;
  int operator = 0;
    exp1 = computationalExpression();
    if (jj_2_23(2)) {
      jj_consume_token(EQUAL);
    } else if (jj_2_24(2)) {
      jj_consume_token(UNEQUAL);
    } else if (jj_2_25(2)) {
      jj_consume_token(GREATERTHAN);
    } else if (jj_2_26(2)) {
      jj_consume_token(LESSTHAN);
    } else if (jj_2_27(2)) {
      jj_consume_token(GREATEROREQUAL);
    } else if (jj_2_28(2)) {
      jj_consume_token(LESSOREQUAL);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (token.image.equals("==")) operator = ComparisonExpression.EQUAL;
    if (token.image.equals(">")) operator = ComparisonExpression.GREATERTHAN;
    if (token.image.equals("<")) operator = ComparisonExpression.LESSTHAN;
    if (token.image.equals(">=")) operator = ComparisonExpression.GREATEROREQUAL;
    if (token.image.equals("=<")) operator = ComparisonExpression.LESSOREQUAL;
    exp2 = computationalExpression();
    log.debug(exp1 + "/" + exp2);
    result = new ComparisonExpression(operator, exp1, exp2);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/**void ConditionalPrimaryExpression() :{}{ computationalExpression()|  "(" ConditionalOrFunction() ")"}*/
/*** parser for local function: "local functionName parameter1 parameter2 ... ;*/
  final public UkuExpression computationalExpression() throws ParseException {
  UkuExpression exp1, exp2;
  UkuExpression result = null;
  int operator = 0;
    exp1 = computationalMulExpression();
    log.debug(token.image + ": " + exp1);
    label_6:
    while (true) {
      if (jj_2_29(2)) {
        ;
      } else {
        break label_6;
      }
      jj_consume_token(ADDITIVE);
      operator = token.image.equals("+") ? NumericalExpression.ADD : NumericalExpression.SUB;
      exp2 = computationalMulExpression();
      if (result != null) exp1 = result;
      result = new BinaryNumericalExpression(operator);
      ((BinaryNumericalExpression) result).setOperand1(exp1);
      ((BinaryNumericalExpression) result).setOperand2(exp2);
    }
    //log.debug(exp1 _
    if (result == null) result = exp1;
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public UkuExpression computationalMulExpression() throws ParseException {
  int operator = 0;
  UkuExpression exp1 = null, exp2 = null;
  UkuExpression result = null;
    exp1 = computationalUnaryExpression();
    log.debug("computationalUnaryExpression " + token.image + ": " + exp1);
    label_7:
    while (true) {
      if (jj_2_30(2)) {
        ;
      } else {
        break label_7;
      }
      if (jj_2_31(2)) {
        jj_consume_token(34);
      } else if (jj_2_32(2)) {
        jj_consume_token(35);
      } else if (jj_2_33(2)) {
        jj_consume_token(36);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      operator = token.image.equals("*") ? BinaryNumericalExpression.MUL : token.image.equals("/") ? BinaryNumericalExpression.DIV : BinaryNumericalExpression.MOD;
      exp2 = computationalUnaryExpression();
      if (result != null) exp1 = result;
      result = new BinaryNumericalExpression(operator);
      ((BinaryNumericalExpression) result).setOperand1(exp1);
      ((BinaryNumericalExpression) result).setOperand2(exp2);
    }
    if (result == null) result = exp1;
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public UkuExpression computationalUnaryExpression() throws ParseException {
  UkuExpression operand = null;
  UkuExpression result = null;
  int operator = 0;
    if (jj_2_34(2)) {
      jj_consume_token(ADDITIVE);
    log.debug("Minus");
    operator = token.image.equals("-") ? NumericalExpression.MINUS : NumericalExpression.PLUS;
      computationalPrimaryExpression();
    result = new UnaryNumericalExpression(operator);
    ((UnaryNumericalExpression) result).setOperand(operand);
    {if (true) return result;}
    } else if (jj_2_35(2)) {
      result = computationalPrimaryExpression();
    {if (true) return result;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public UkuExpression computationalPrimaryExpression() throws ParseException {
  UkuExpression result = null;
    if (jj_2_36(2)) {
      result = NumberOrVariable();
    //log.debug("got here" + result);
    {if (true) return result;}
    } else if (jj_2_37(2)) {
      jj_consume_token(32);
      result = computationalExpression();
      jj_consume_token(33);
    {if (true) return result;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public UkuExpression NumberOrVariable() throws ParseException {
  UkuExpression result = null;
    if (jj_2_38(2)) {
      result = ConstantExpression();
    {if (true) return result;}
    } else if (jj_2_39(2)) {
      jj_consume_token(VARIABLE);
    String var = token.image.trim();
    if (!variables.contains(var)) variables.add(var);
    Variable v = new Variable(var);
    {if (true) return v;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public UkuExpression ConstantExpression() throws ParseException {
  ukuConstant c = null;
    jj_consume_token(INTEGER_LITERAL);
    c = new ukuConstant(Integer.parseInt(token.image));
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) return true;
    }
    return false;
  }

  private boolean jj_3R_8() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(0)) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_16()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) return true;
    }
    return false;
  }

  private boolean jj_3_34() {
    if (jj_scan_token(ADDITIVE)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(LESSOREQUAL)) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(GREATEROREQUAL)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(LESSTHAN)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(GREATERTHAN)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(UNEQUAL)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_23()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) return true;
    }
    }
    }
    }
    }
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(SCOPE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_3R_15()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_scan_token(36)) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_scan_token(35)) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(34)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) return true;
    }
    }
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3_22()) return true;
    }
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_21()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_30()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_3R_14()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(32)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(33)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(LOCAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) return true;
    }
    return false;
  }

  private boolean jj_3_38() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(ADDITIVE)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    return false;
  }

  private boolean jj_3_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) return true;
    }
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_20()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) return true;
    }
    return false;
  }

  private boolean jj_3_37() {
    if (jj_scan_token(32)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(33)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_10()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ukuFlowScriptTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[39];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ukuFlowScript(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ukuFlowScript(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ukuFlowScriptTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ukuFlowScript(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ukuFlowScriptTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ukuFlowScript(ukuFlowScriptTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ukuFlowScriptTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[37];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 37; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 39; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
