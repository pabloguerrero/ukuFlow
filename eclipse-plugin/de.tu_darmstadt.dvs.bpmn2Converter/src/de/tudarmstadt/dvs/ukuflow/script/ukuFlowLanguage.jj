options{  LOOKAHEAD= 2;  CHOICE_AMBIGUITY_CHECK = 2;  OTHER_AMBIGUITY_CHECK = 1;  STATIC = false;  DEBUG_PARSER = false;  DEBUG_LOOKAHEAD = true;  DEBUG_TOKEN_MANAGER = false;  ERROR_REPORTING = true;  JAVA_UNICODE_ESCAPE = false;  UNICODE_INPUT = false;  IGNORE_CASE = true;  USER_TOKEN_MANAGER = false;  USER_CHAR_STREAM = false;  BUILD_PARSER = true;  BUILD_TOKEN_MANAGER = true;  SANITY_CHECK = true;  FORCE_LA_CHECK = false;}PARSER_BEGIN(ukuFlowScript)package de.tudarmstadt.dvs.ukuflow.script;import de.tudarmstadt.dvs.ukuflow.script.expression.*;import de.tudarmstadt.dvs.ukuflow.script.function.*;import java.util.LinkedList;import java.util.List;import java.io.FileInputStream;import java.io.FileNotFoundException;public class ukuFlowScript{  private static boolean debug = true;  public static void printf(Object o)  {    if (debug) System.out.println("ukuFlowScript\t" + o);  }  public static void main(String args []) throws ParseException  {    String fileName = "bool.txt";    ukuFlowScript parser = null;    try    {      parser = new ukuFlowScript(new FileInputStream(fileName));    }    catch (FileNotFoundException e1)    {      // TODO Auto-generated catch block      e1.printStackTrace();    }    try    {      System.out.println("testbegin");      LocalFunction lf = parser.localFunction();      System.out.println(lf);    }    catch (ParseException e)    {      System.out.println(parser.token.image);      e.printStackTrace();    }  }}PARSER_END(ukuFlowScript)SKIP :{  " "| "\n"| "\t"| "\r"}TOKEN : /* binary logical operators */{  < AND :    (      "AND"    | "&"    | "&&"    ) >| < OR :    (      "OR"    | "|"    | "||"    ) >| < XOR :    (      "XOR"    | "^"    ) >}TOKEN : /* Unary logical operator */{  < NOT :    (      "NOT"    | "~"    ) >}TOKEN : /* BOOLEAN */{  < BOOLEAN :    (      < TRUE >    | < FALSE >    ) >| < #TRUE :    (      "TRUE"    | "true"    ) >| < #FALSE :    (      "FALSE"    | "false"    ) >}TOKEN :{  < LOCAL : "local" >| < SCOPE : "@" < IDENTIFIER > >}TOKEN :{  < VARIABLE : "$" < IDENTIFIER > >}TOKEN : /* LITERALS */{  < INTEGER_LITERAL :    < DECIMAL_LITERAL > ([ "l", "L" ])?  | < HEX_LITERAL > ([ "l", "L" ])? //| < OCTAL_LITERAL > ([ "l", "L" ])?     >| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >  //|   //  < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >}TOKEN : /* IDENTIFIERS */{  < IDENTIFIER :    (      < LETTER >    | "_"    )    (      < LETTER >    | < DIGIT >    | "_"    )* >| < #LETTER : [ "\u0024", "\u0041"-"\u005a", "\u005f", "\u0061"-"\u007a", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff" ] >| < #DIGIT : [ "\u0030"-"\u0039", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049" ] >}TOKEN : /* Comparision operators */{  < EQUAL : "==" >| < UNEQUAL : "!=" >| < GREATERTHAN : ">" >| < LESSTHAN : "<" >| < GREATEROREQUAL : ">=" >| < LESSOREQUAL : "<=" >}TOKEN :{  < STRING :    (      < IDENTIFIER >    | "_"    | "-"    )* >}/* ultimate function for parsing all type of expression */void mainFunction() :{}{  (    (      localFunction()    | scopeFunction()    | computationFunction()    )+  | ConditionalOrFunction()  )  < EOF >}/** * for parsing task script */void taskScript() :{}{  (    localFunction()  | scopeFunction()  | computationFunction()  )*}LocalFunction localFunction() :{  String variable = null;  String function_name = "";  UkuExpression tmp;  List < PrimaryExpression > params = new LinkedList < PrimaryExpression > ();  LocalFunction lf;}{  < LOCAL >  [    < IDENTIFIER >    {      variable = token.image.trim();    }    "="  ]  < IDENTIFIER >  {    function_name = token.image.trim();  }  (    (      tmp = NumberOrVariable()      {        params.add((PrimaryExpression) tmp);      }    | < IDENTIFIER >      {        params.add(new UkuString(token.image.trim()));      }    | < STRING >      {        params.add(new UkuString(token.image.trim()));      }    )  )*  ";"  {    lf = new LocalFunction(variable, function_name, params);    return lf;  }}void scopeFunction() :{  UkuExpression tmp = null;  String scopeName = "";  List < PrimaryExpression > params = new LinkedList < PrimaryExpression > ();}{  < SCOPE > < IDENTIFIER >  {    scopeName = token.image.trim();  }  (    (      tmp = NumberOrVariable()      {        params.add((PrimaryExpression) tmp);      }    | < VARIABLE >      {        //params.add(new UkuString(token.image.trim()));        params.add(new Variable(token.image.trim()));      }    | < STRING >      {        params.add(new UkuString(token.image.trim()));      }    )  )*  ";"  { //TODO:  }}/**parser for computation function. It can handle: +,-,*,/,%,^,*/void computationFunction() :{  UkuExpression msg = null;}{  < IDENTIFIER > "=" computationalExpression() ";"  {    System.out.println(msg);  }}UkuExpression ConditionalOrFunction() :{  UkuExpression result = null, exp1 = null, exp2 = null;}{  exp1 = ConditionalAndFunction()  (    < OR > exp2 = ConditionalAndFunction()    {      if (result != null) exp1 = result;      result = new BinaryLogicalExpression(LogicalExpression.OR);      ((BinaryLogicalExpression) result).setOperand1(exp1);      ((BinaryLogicalExpression) result).setOperand2(exp2);    }  )*  {    if (result == null) result = exp1;    return result;  }}UkuExpression ConditionalAndFunction() :{  UkuExpression result = null, exp1 = null, exp2 = null;}{  exp1 = ConditionalXorFunction()  (    < AND > exp2 = ConditionalXorFunction()    {      if (result != null) exp1 = result;      result = new BinaryLogicalExpression(LogicalExpression.AND);      ((BinaryLogicalExpression) result).setOperand1(exp1);      ((BinaryLogicalExpression) result).setOperand2(exp2);    }  )*  {    if (result == null) result = exp1;    return result;  }}UkuExpression ConditionalXorFunction() :{  UkuExpression result = null, exp1 = null, exp2 = null;}{  exp1 = ConditionalNotFunction()  (    < XOR > exp2 = ConditionalNotFunction()    {      if (result != null) exp1 = result;      result = new BinaryLogicalExpression(LogicalExpression.XOR);      ((BinaryLogicalExpression) result).setOperand1(exp1);      ((BinaryLogicalExpression) result).setOperand2(exp2);    }  )*  {    if (result == null) result = exp1;    return result;  }}UkuExpression ConditionalNotFunction() :{  UkuExpression result = null, exp1 = null;}{  < NOT > exp1 = ConditionalPrimaryFunction()  {    result = new UnaryLogicalExpression(LogicalExpression.NOT);    ((UnaryLogicalExpression) result).setOperand(exp1);    return result;  }| result = ConditionalPrimaryFunction()  {    return result;  }}UkuExpression ConditionalPrimaryFunction() :{  UkuExpression result = null;}{  < BOOLEAN >  {    return new Constant(token.image);  }| result = ConditionalRelationalFunction()  {    return result;  }| //LOOKAHEAD("+" "-" "*" "/" "%" "(")  "(" result = ConditionalOrFunction() ")"  {    return result;  }| "(" result = ConditionalRelationalFunction() ")"  {    return result;  }}UkuExpression ConditionalRelationalFunction() :{  UkuExpression result = null, exp1 = null, exp2 = null;  int operator = 0;}{  exp1 = NumberOrVariable()  (    < EQUAL >  | < UNEQUAL >  | < GREATERTHAN >  | < LESSTHAN >  | < GREATEROREQUAL >  | < LESSOREQUAL >  )  {    if (token.image.equals("==")) operator = ComparisonExpression.EQUAL;    if (token.image.equals(">")) operator = ComparisonExpression.GREATERTHAN;    if (token.image.equals("<")) operator = ComparisonExpression.LESSTHAN;    if (token.image.equals(">=")) operator = ComparisonExpression.GREATEROREQUAL;    if (token.image.equals("=<")) operator = ComparisonExpression.LESSOREQUAL;  }  exp2 = NumberOrVariable()  {    result = new ComparisonExpression(operator, exp1, exp2);    return result;  }}/**void ConditionalPrimaryExpression() :{}{ computationalExpression()|  "(" ConditionalOrFunction() ")"}*//*** parser for local function: "local functionName parameter1 parameter2 ... ;*/UkuExpression computationalExpression() :{  UkuExpression exp1, exp2;  UkuExpression result = null;  int operator = 0;}{  exp1 = computationalMulExpression()  (    (      "+"    | "-"    )    {      operator = token.image.equals("+") ? NumericalExpression.ADD : NumericalExpression.SUB;    }    exp2 = computationalMulExpression()    {      if (result != null) exp1 = result;      result = new BinaryNumericalExpression(operator);      ((BinaryNumericalExpression) result).setOperand1(exp1);      ((BinaryNumericalExpression) result).setOperand2(exp2);    }  )*  {    if (result == null) result = exp1;    return result;  }}UkuExpression computationalMulExpression() :{  int operator = 0;  UkuExpression exp1 = null, exp2 = null;  UkuExpression result = null;}{  computationalUnaryExpression()  (    (      "*"    | "/"    | "%"    )    {      operator = token.image.equals("*") ? BinaryNumericalExpression.MUL : token.image.equals("/") ? BinaryNumericalExpression.DIV : BinaryNumericalExpression.MOD;    }    exp2 = computationalUnaryExpression()    {      if (result != null) exp1 = result;      result = new BinaryNumericalExpression(operator);      ((BinaryNumericalExpression) result).setOperand1(exp1);      ((BinaryNumericalExpression) result).setOperand2(exp2);    }  )*  {    if (result == null) result = exp1;    return result;  }}UkuExpression computationalUnaryExpression() :{  NumericalExpression operand = null;  NumericalExpression result = null;  int operator = 0;}{  (    "+"  | "-"  )  {    operator = token.image.equals("-") ? NumericalExpression.MINUS : NumericalExpression.PLUS;  }  computationalPrimaryExpression()  {    result = new UnaryNumericalExpression(operator);    ((UnaryNumericalExpression) result).setOperand(operand);    return result;  }| computationalPrimaryExpression()  {    return result;  }}UkuExpression computationalPrimaryExpression() :{  UkuExpression result = null;}{  result = NumberOrVariable()  {    return result;  }| "(" result = computationalExpression() ")"  {    return result;  }}UkuExpression NumberOrVariable() :{  UkuExpression result = null;}{  result = ConstantExpression()  {    return result;  }| < VARIABLE >  {    Variable v = new Variable(token.image.trim());    return v;  }}UkuExpression ConstantExpression() :{  Constant c = null;}{  < INTEGER_LITERAL >  {    c = new Constant(Integer.parseInt(token.image));    return c;  }}