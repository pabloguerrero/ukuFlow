/* Generated By:JavaCC: Do not edit this line. EventBaseScriptConstants.java */
package de.tudarmstadt.dvs.ukuflow.script.eventbasescript;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface EventBaseScriptConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int AND = 5;
  /** RegularExpression Id. */
  int OR = 6;
  /** RegularExpression Id. */
  int NOT = 7;
  /** RegularExpression Id. */
  int COMPOSITION_POLICY = 8;
  /** RegularExpression Id. */
  int EVICTION = 9;
  /** RegularExpression Id. */
  int EVENT_OUTPUT_TYPE = 10;
  /** RegularExpression Id. */
  int COMPARISON = 11;
  /** RegularExpression Id. */
  int BOOLEAN = 12;
  /** RegularExpression Id. */
  int TRUE = 13;
  /** RegularExpression Id. */
  int FALSE = 14;
  /** RegularExpression Id. */
  int immediate_EG = 15;
  /** RegularExpression Id. */
  int absolute_EG = 16;
  /** RegularExpression Id. */
  int offset_EG = 17;
  /** RegularExpression Id. */
  int relative_EG = 18;
  /** RegularExpression Id. */
  int functional_EG = 19;
  /** RegularExpression Id. */
  int PEG = 20;
  /** RegularExpression Id. */
  int APEG = 21;
  /** RegularExpression Id. */
  int ADEG = 22;
  /** RegularExpression Id. */
  int SEF = 23;
  /** RegularExpression Id. */
  int AND_COMPOSITION_EF = 24;
  /** RegularExpression Id. */
  int OR_COMPOSITION_EF = 25;
  /** RegularExpression Id. */
  int NOT_COMPOSITION_EF = 26;
  /** RegularExpression Id. */
  int SEQUENCE_COMPOSITION_EF = 27;
  /** RegularExpression Id. */
  int MIN_COMPOSITION_EF = 28;
  /** RegularExpression Id. */
  int MAX_COMPOSITION_EF = 29;
  /** RegularExpression Id. */
  int COUNT_COMPOSITION_EF = 30;
  /** RegularExpression Id. */
  int SUM_COMPOSITION_EF = 31;
  /** RegularExpression Id. */
  int AVG_COMPOSITION_EF = 32;
  /** RegularExpression Id. */
  int STDEV_COMPOSITION_EF = 33;
  /** RegularExpression Id. */
  int INCREASE_EF = 34;
  /** RegularExpression Id. */
  int DECREASE_EF = 35;
  /** RegularExpression Id. */
  int REMAIN_EF = 36;
  /** RegularExpression Id. */
  int TOP = 37;
  /** RegularExpression Id. */
  int SENSOR_TYPE = 38;
  /** RegularExpression Id. */
  int POSITIVE_NUMBER = 39;
  /** RegularExpression Id. */
  int BINARY = 40;
  /** RegularExpression Id. */
  int PATTERN = 41;
  /** RegularExpression Id. */
  int REPETITION = 42;
  /** RegularExpression Id. */
  int M = 43;
  /** RegularExpression Id. */
  int V = 44;
  /** RegularExpression Id. */
  int A = 45;
  /** RegularExpression Id. */
  int K = 46;
  /** RegularExpression Id. */
  int I = 47;
  /** RegularExpression Id. */
  int GAUSSIAN_DISTRIBUTION = 48;
  /** RegularExpression Id. */
  int CHI_SQUARE_DISTRIBUTION = 49;
  /** RegularExpression Id. */
  int PARETO_DISTRIBUTION = 50;
  /** RegularExpression Id. */
  int IDENTIFIER = 51;
  /** RegularExpression Id. */
  int LETTER = 52;
  /** RegularExpression Id. */
  int DIGIT = 53;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "<AND>",
    "<OR>",
    "<NOT>",
    "<COMPOSITION_POLICY>",
    "<EVICTION>",
    "<EVENT_OUTPUT_TYPE>",
    "<COMPARISON>",
    "<BOOLEAN>",
    "<TRUE>",
    "<FALSE>",
    "\"IMMEDIATE_EG\"",
    "\"ABSOLUTE_EG\"",
    "\"OFFSET_EG\"",
    "\"RELATIVE_EG\"",
    "\"FUNCTIONAL_EG\"",
    "\"PERIODIC_EG\"",
    "\"PATTERN_EG\"",
    "\"DISTRIBUTION_EG\"",
    "\"SIMPLE_EF\"",
    "\"AND_COMPOSITION_EF\"",
    "\"OR_COMPOSITION_EF\"",
    "\"NOT_COMPOSITION_EF\"",
    "\"SEQUENCE_COMPOSITION_EF\"",
    "\"MIN_COMPOSITION_EF\"",
    "\"MAX_COMPOSITION_EF\"",
    "\"COUNT_COMPOSITION_EF\"",
    "\"SUM_COMPOSITION_EF\"",
    "\"AVG_COMPOSITION_EF\"",
    "\"STDEV_COMPOSITION_EF\"",
    "\"INCREASE_EF\"",
    "\"DECREASE_EF\"",
    "\"REMAIN_EF\"",
    "\"TOP\"",
    "<SENSOR_TYPE>",
    "<POSITIVE_NUMBER>",
    "<BINARY>",
    "<PATTERN>",
    "<REPETITION>",
    "\"m\"",
    "\"v\"",
    "\"a\"",
    "\"k\"",
    "\"i\"",
    "\"GAUSSIAN_DISTRIBUTION\"",
    "\"CHI_SQUARE_DISTRIBUTION\"",
    "\"PARETO_DISTRIBUTION\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"=\"",
    "\"@s\"",
    "\"(\"",
    "\")\"",
    "\"^\"",
    "\":\"",
    "\"-\"",
    "\"[\"",
    "\",\"",
    "\"]\"",
    "\"FFF\"",
    "\"/\"",
  };

}
