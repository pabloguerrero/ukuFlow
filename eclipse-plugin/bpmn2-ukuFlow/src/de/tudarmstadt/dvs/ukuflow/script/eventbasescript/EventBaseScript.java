/* Generated By:JavaCC: Do not edit this line. EventBaseScript.java */
package de.tudarmstadt.dvs.ukuflow.script.eventbasescript;
import java.io.*;
import java.util.List;
import java.util.ArrayList;
import de.tudarmstadt.dvs.ukuflow.script.eventbasescript.expression.*;
import de.tudarmstadt.dvs.ukuflow.script.eventbasescript.visitor.ChannelIDManager;
public class EventBaseScript implements EventBaseScriptConstants {
  private static EventBaseScript INSTANCE;
  public static void main(String args []) throws ParseException
  {
    String fileName = "eventbasescript.txt";
    EventBaseScript INSTANCE = null;
    try
    {
      INSTANCE = new EventBaseScript(new FileInputStream(fileName));
    }
    catch (FileNotFoundException e1)
    {
      e1.printStackTrace();
    }
    System.out.println("testbegin");
    INSTANCE.validate();
    System.out.println("testdone");
  }
  public static EventBaseScript getInstance(String text)
  {
    InputStream is = null;
    try
    {
      is = new ByteArrayInputStream(text.getBytes("UTF-8"));
    }
    catch (UnsupportedEncodingException e)
    {
      e.printStackTrace();
    }
    if (INSTANCE == null) INSTANCE = new EventBaseScript(is);
    else INSTANCE.ReInit(is);
    //INSTANCE.errors = new LinkedList < String > ();
    //INSTANCE.variables = new LinkedList < String > ();
    return INSTANCE;
  }

  final public EEventBaseScript validate() throws ParseException {
  EventBaseOperator top = null;
  EventBaseOperator tmp;
  List<EventBaseOperator > result = new ArrayList<EventBaseOperator >();
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      tmp = any_function();
      result.add(tmp);
    }
    top = TOP();
    label_2:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_2;
      }
      tmp = any_function();
      result.add(tmp);
    }
    jj_consume_token(0);
    {if (true) return new EEventBaseScript(result,top);}
    throw new Error("Missing return statement in function");
  }

/**
* assignment
*/
  final public EventBaseOperator any_function() throws ParseException {
  EventBaseOperator result = null;
  String var = null;
    jj_consume_token(IDENTIFIER);
    var = token.image.trim();
    jj_consume_token(32);
    result = eventbaseOperator();
    EVariable evar = new EVariable(var,result);
    ChannelIDManager.variableMapping.put(var,evar);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public EventBaseOperator eventbaseOperator() throws ParseException {
  EventBaseOperator result = null;
    if (jj_2_3(2)) {
      result = PEG();
    } else if (jj_2_4(2)) {
      result = APEG();
    } else if (jj_2_5(2)) {
      result = ADEG();
    } else if (jj_2_6(2)) {
      result = SEF();
    } else if (jj_2_7(2)) {
      result = CEF();
    } else if (jj_2_8(2)) {
      result = NonRecurring_EG();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public EventBaseOperator TOP() throws ParseException {
  EventBaseOperator result = null;
    jj_consume_token(TOP);
    jj_consume_token(32);
    if (jj_2_9(2)) {
      result = eventbaseOperator();
    } else if (jj_2_10(2)) {
      jj_consume_token(IDENTIFIER);
        result = ChannelIDManager.variableMapping.get(token.image.trim());
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public void scope() throws ParseException {
    jj_consume_token(33);
    jj_consume_token(IDENTIFIER);
  }

  final public EventBaseOperator NonRecurring_EG() throws ParseException {
  EventBaseOperator result;
    if (jj_2_11(2)) {
      result = immediate_EG();
    } else if (jj_2_12(2)) {
      result = absolute_EG();
    } else if (jj_2_13(2)) {
      result = offset_EG();
    } else if (jj_2_14(2)) {
      result = relative_EG();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public EventBaseOperator immediate_EG() throws ParseException {
  EImmediateEG result = new EImmediateEG();
    jj_consume_token(immediate_EG);
    jj_consume_token(SENSOR_TYPE);
    result.setSensorType(token.image.trim());
    if (jj_2_15(2)) {
      jj_consume_token(33);
      jj_consume_token(IDENTIFIER);
          result.setScope(token.image.trim());
    } else {
      ;
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public EventBaseOperator absolute_EG() throws ParseException {
  EAbsoluteEG result = new EAbsoluteEG();
  TimeExpression time;
    jj_consume_token(absolute_EG);
    jj_consume_token(SENSOR_TYPE);
    result.setSensorType(token.image.trim());
    time = timeExpression();
        result.setTimeExpression(time);
    if (jj_2_16(2)) {
      jj_consume_token(33);
      jj_consume_token(IDENTIFIER);
          result.setScope(token.image.trim());
    } else {
      ;
    }
          {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public EventBaseOperator offset_EG() throws ParseException {
  EOffsetEG result = new EOffsetEG();
  TimeExpression time;
    jj_consume_token(offset_EG);
    jj_consume_token(SENSOR_TYPE);
    result.setSensorType(token.image.trim());
    time = timeExpression();
        result.setTimeExpression(time);
    if (jj_2_17(2)) {
      jj_consume_token(33);
      jj_consume_token(IDENTIFIER);
          result.setScope(token.image.trim());
    } else {
      ;
    }
  {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public EventBaseOperator relative_EG() throws ParseException {
  ERelativeEG result = new ERelativeEG();
  EventBaseOperator source;
  TimeExpression time;
    jj_consume_token(relative_EG);
    jj_consume_token(SENSOR_TYPE);
    result.setSensorType(token.image.trim());
    time = timeExpression();
        result.setTimeExpression(time);
    jj_consume_token(34);
    source = eventbaseOperator();
    jj_consume_token(35);
  result.setSource(source);
  {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public EPeriodicEG PEG() throws ParseException {
  EPeriodicEG result = new EPeriodicEG();
  TimeExpression periodic;
    jj_consume_token(PEG);
    jj_consume_token(SENSOR_TYPE);
    result.setSensorType(token.image.trim());
    jj_consume_token(36);
    periodic = timeExpression();
    result.setTime(periodic);
    jj_consume_token(33);
    jj_consume_token(IDENTIFIER);
    result.setScope(token.image.trim());
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/**
* allowed formats:
* 	yyyy-MM-dd HH:mm:ss (absolute time)
*	HH:mm:ss			(time amount)
* 	mm:ss				( 	-nt-	)
*/
  final public TimeExpression timeExpression() throws ParseException {
  TimeExpression result = new TimeExpression();
    if (jj_2_19(2)) {
      if (jj_2_18(2)) {
        jj_consume_token(NUMBER);
          result.year = Integer.parseInt(token.image.trim());
        jj_consume_token(37);
        jj_consume_token(NUMBER);
          result.month = Integer.parseInt(token.image.trim());
        jj_consume_token(37);
        jj_consume_token(NUMBER);
          result.day = Integer.parseInt(token.image.trim());
      } else {
        ;
      }
      jj_consume_token(NUMBER);
        result.hour = Integer.parseInt(token.image.trim());
      jj_consume_token(38);
    } else {
      ;
    }
    jj_consume_token(NUMBER);
      result.minute = Integer.parseInt(token.image.trim());
    jj_consume_token(38);
    jj_consume_token(NUMBER);
      result.second = Integer.parseInt(token.image.trim());
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public EAperiodicPatternedEG APEG() throws ParseException {
  EAperiodicPatternedEG result = new EAperiodicPatternedEG();
  TimeExpression time ;
    jj_consume_token(APEG);
    jj_consume_token(SENSOR_TYPE);
    result.setSensorType(token.image.trim());
    jj_consume_token(36);
    jj_consume_token(BINARY);
    result.setPattern(token.image.trim());
    time = timeExpression();
    result.setTime(time);
    jj_consume_token(33);
    jj_consume_token(IDENTIFIER);
    result.setScope(token.image.trim());
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public EAperiodicDistributionEG ADEG() throws ParseException {
  EAperiodicDistributionEG result = new EAperiodicDistributionEG();
  String function = null;
  List < Integer > params = new ArrayList < Integer > ();
  int tmp = 0;
    jj_consume_token(ADEG);
    jj_consume_token(SENSOR_TYPE);
    result.setSensorType(token.image.trim());
    jj_consume_token(36);
    jj_consume_token(IDENTIFIER);
    function = token.image.trim();
    label_3:
    while (true) {
      if (jj_2_20(2)) {
        ;
      } else {
        break label_3;
      }
      tmp = Number();
      params.add(tmp);
    }
    result.setFunction(function, params);
    jj_consume_token(33);
    jj_consume_token(IDENTIFIER);
    result.setScope(token.image.trim());
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public ESimpleEF SEF() throws ParseException {
  ESimpleEF result = new ESimpleEF();
  List < ESimpleFilterConstraint > constraints = new ArrayList < ESimpleFilterConstraint > ();
  ESimpleFilterConstraint constr = null;
  EventGenerator eG;
    jj_consume_token(SEF);
    jj_consume_token(39);
    constr = Constraint();
    if (constr != null)
    {
      constraints.add(constr);
    }
    else
    { //TODO error
    }
    label_4:
    while (true) {
      if (jj_2_21(2)) {
        ;
      } else {
        break label_4;
      }
      jj_consume_token(40);
      constr = Constraint();
      if (constr != null)
      {
        constraints.add(constr);
      }
      else
      { //TODO error
      }
    }
    jj_consume_token(41);
    jj_consume_token(39);
    if (jj_2_22(2)) {
      jj_consume_token(IDENTIFIER);
      result.addSource(token.image.trim());
    } else if (jj_2_23(2)) {
      eG = event_generator();
      result.addSource(eG);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_5:
    while (true) {
      if (jj_2_24(2)) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(40);
      if (jj_2_25(2)) {
        jj_consume_token(IDENTIFIER);
        result.addSource(token.image.trim());
      } else if (jj_2_26(2)) {
        eG = event_generator();
        result.addSource(eG);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(41);
    result.setConstraints(constraints);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public EventGenerator event_generator() throws ParseException {
  EventGenerator result;
    if (jj_2_27(2)) {
      result = PEG();
    } else if (jj_2_28(2)) {
      result = APEG();
    } else if (jj_2_29(2)) {
      result = ADEG();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public ESimpleFilterConstraint Constraint() throws ParseException {
  ESimpleFilterConstraint result = null;
  String type = null, value = null, op = null;
  boolean valueFirst = true;
    if (jj_2_30(2)) {
      jj_consume_token(EVENT_OUTPUT_TYPE);
        valueFirst = false;
        type = token.image.trim();
      jj_consume_token(COMPARISON);
        op = token.image.trim();
      Event_output_value();
        value = token.image.trim();
    } else if (jj_2_31(2)) {
      Event_output_value();
        value = token.image.trim();
      jj_consume_token(COMPARISON);
        op = token.image.trim();
      jj_consume_token(EVENT_OUTPUT_TYPE);
        type = token.image.trim();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    result = new ESimpleFilterConstraint(type, op, value, valueFirst);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String Event_output_value() throws ParseException {
  String result = null;
    if (jj_2_32(2)) {
      jj_consume_token(IDENTIFIER);
    } else if (jj_2_33(2)) {
      Number();
    } else if (jj_2_34(2)) {
      jj_consume_token(SENSOR_TYPE);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    result = token.image.trim();
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public EComplexEF CEF() throws ParseException {
  EEvaluableExpression exp = null;
  EComplexEF result = new EComplexEF();
    jj_consume_token(CEF);
    exp = OR_operator();
    result.setCondition(exp);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public void policy() throws ParseException {
    jj_consume_token(42);
    jj_consume_token(COMPOSITION_POLICY);
    jj_consume_token(42);
    jj_consume_token(EVICTION);
  }

  final public EEvaluableExpression OR_operator() throws ParseException {
  EEvaluableExpression result = null;
  String op = "OR";
  EEvaluableExpression left = null;
  EEvaluableExpression right = null;
    left = AND_operator();
    label_6:
    while (true) {
      if (jj_2_35(2)) {
        ;
      } else {
        break label_6;
      }
      jj_consume_token(OR);
      right = AND_operator();
      if(result!=null)
        left = result;
      result = new EComplexFilterBinaryExpression(op, left, right);
    }
    if(result==null) result = left;
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public EEvaluableExpression AND_operator() throws ParseException {
  EEvaluableExpression result = null;
  EEvaluableExpression left = null;
  EEvaluableExpression right = null;
  String op = "AND";
    left = NOT_operator();
    label_7:
    while (true) {
      if (jj_2_36(2)) {
        ;
      } else {
        break label_7;
      }
      jj_consume_token(AND);
      right = NOT_operator();
      if(result != null)
        left = result;
      result = new EComplexFilterBinaryExpression(op,left,right);
    }
    if (result == null) result = left;
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public EEvaluableExpression NOT_operator() throws ParseException {
  String op = "NOT";
  EEvaluableExpression exp;
    if (jj_2_37(2)) {
      exp = Terminate_Operand();
    {if (true) return exp;}
    } else if (jj_2_38(2)) {
      jj_consume_token(NOT);
      exp = NOT_operator();
    {if (true) return new EComplexFilterUnaryExpression(op, exp);}
    } else if (jj_2_39(2)) {
      jj_consume_token(34);
      exp = OR_operator();
      jj_consume_token(35);
    {if (true) return exp;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public EventBaseOperator Terminate_Operand() throws ParseException {
  EventBaseOperator result = null;
    if (jj_2_40(2)) {
      jj_consume_token(IDENTIFIER);
      result = ChannelIDManager.variableMapping.get(token.image.trim());
    } else if (jj_2_41(2)) {
      result = eventbaseOperator();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public int Number() throws ParseException {
    if (jj_2_42(2)) {
      jj_consume_token(BINARY);
    } else if (jj_2_43(2)) {
      jj_consume_token(NUMBER);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return Integer.parseInt(token.image.trim());}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) return true;
    }
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(immediate_EG)) return true;
    if (jj_scan_token(SENSOR_TYPE)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(CEF)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(40)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) return true;
    }
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(APEG)) return true;
    if (jj_scan_token(SENSOR_TYPE)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(relative_EG)) return true;
    if (jj_scan_token(SENSOR_TYPE)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) return true;
    }
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_scan_token(SENSOR_TYPE)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(33)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_scan_token(34)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(40)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_37() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(offset_EG)) return true;
    if (jj_scan_token(SENSOR_TYPE)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(SEF)) return true;
    if (jj_scan_token(39)) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_3R_23()) return true;
    if (jj_scan_token(COMPARISON)) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(NUMBER)) return true;
    if (jj_scan_token(37)) return true;
    return false;
  }

  private boolean jj_3_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) jj_scanpos = xsp;
    if (jj_scan_token(NUMBER)) return true;
    if (jj_scan_token(38)) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(33)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(EVENT_OUTPUT_TYPE)) return true;
    if (jj_scan_token(COMPARISON)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) return true;
    }
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(absolute_EG)) return true;
    if (jj_scan_token(SENSOR_TYPE)) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(ADEG)) return true;
    if (jj_scan_token(SENSOR_TYPE)) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(PEG)) return true;
    if (jj_scan_token(SENSOR_TYPE)) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(32)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(33)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_scan_token(BINARY)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public EventBaseScriptTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[43];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public EventBaseScript(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public EventBaseScript(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new EventBaseScriptTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public EventBaseScript(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new EventBaseScriptTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public EventBaseScript(EventBaseScriptTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(EventBaseScriptTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[43];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 43; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
