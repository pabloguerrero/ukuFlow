/* Generated By:JavaCC: Do not edit this line. EventBaseScript.java */
package de.tudarmstadt.dvs.ukuflow.script.eventbasescript;
import java.io.*;
import java.util.List;
import java.util.ArrayList;
import de.tudarmstadt.dvs.ukuflow.script.eventbasescript.expression.*;
import de.tudarmstadt.dvs.ukuflow.script.eventbasescript.visitor.ChannelIDManager;
import de.tudarmstadt.dvs.ukuflow.tools.debugger.BpmnLog;
import de.tudarmstadt.dvs.ukuflow.script.eventbasescript.expression.sef.*;

public class EventBaseScript implements EventBaseScriptConstants {
  private static EventBaseScript INSTANCE;

  private static BpmnLog log = BpmnLog.getInstance(EventBaseScript.class.getSimpleName());
  public static List<String > scopes;

  public static void main(String args []) throws ParseException
  {
    String fileName = "eventbasescript.txt";
    EventBaseScript INSTANCE = null;
    try
    {
      INSTANCE = new EventBaseScript(new FileInputStream(fileName));
    }
    catch (FileNotFoundException e1)
    {
      e1.printStackTrace();
    }
    log.debug("testbegin");
    INSTANCE.validate();
    //sef_expression ef = INSTANCE.test_sef_or();    log.debug("testdone");
  }

  public static EventBaseScript getInstance(String text)
  {
    scopes = new ArrayList<String >();
    InputStream is = null;
    try
    {
      is = new ByteArrayInputStream(text.getBytes("UTF-8"));
    }
    catch (UnsupportedEncodingException e)
    {
      e.printStackTrace();
    }
    if (INSTANCE == null) INSTANCE = new EventBaseScript(is);
    else INSTANCE.ReInit(is);
    //INSTANCE.errors = new LinkedList < String > ();
    //INSTANCE.variables = new LinkedList < String > ();
    return INSTANCE;
  }

  final public String variable() throws ParseException {
  String result;
    if (jj_2_1(10)) {
      jj_consume_token(I);
    } else if (jj_2_2(10)) {
      jj_consume_token(M);
    } else if (jj_2_3(10)) {
      jj_consume_token(A);
    } else if (jj_2_4(10)) {
      jj_consume_token(K);
    } else if (jj_2_5(10)) {
      jj_consume_token(IDENTIFIER);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    result = token.image.trim();
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public EEventBaseScript validate() throws ParseException {
  EventBaseOperator top = null;
  EventBaseOperator tmp;
  List < EventBaseOperator > result = new ArrayList < EventBaseOperator > ();
    label_1:
    while (true) {
      if (jj_2_6(10)) {
        ;
      } else {
        break label_1;
      }
      tmp = any_function();
      result.add(tmp);
    }
    top = TOP();
    label_2:
    while (true) {
      if (jj_2_7(10)) {
        ;
      } else {
        break label_2;
      }
      tmp = any_function();
      result.add(tmp);
    }
    jj_consume_token(0);
    log.debug("cerate ebscript with " + result + "/ top= " + top);
    {if (true) return new EEventBaseScript(result, top);}
    throw new Error("Missing return statement in function");
  }

/**
* assignment
*/
  final public EventBaseOperator any_function() throws ParseException {
  EventBaseOperator result = null;
  String var = null;
    var = variable();
    jj_consume_token(58);
    result = eventbaseOperator();
    EVariable evar = new EVariable(var, result);
    ChannelIDManager.variableMapping.put(var, evar);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public EventBaseOperator eventbaseOperator() throws ParseException {
  EventBaseOperator result = null;
  log.debug("fetching ebOperator");
    if (jj_2_8(10)) {
      result = Recurring_EG();
    } else if (jj_2_9(10)) {
      result = simpleEF();
    } else if (jj_2_10(10)) {
      result = min_ef();
    } else if (jj_2_11(10)) {
      result = NonRecurring_EG();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    log.debug("EB operator is " + result);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public EventBaseOperator TOP() throws ParseException {
  EventBaseOperator result = null;
    jj_consume_token(TOP);
    jj_consume_token(58);
    log.debug("top expression detected");
    if (jj_2_12(10)) {
      result = eventbaseOperator();
    } else if (jj_2_13(10)) {
      variable();
      result = ChannelIDManager.variableMapping.get(token.image.trim());
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String scope() throws ParseException {
    jj_consume_token(59);
    jj_consume_token(IDENTIFIER);
    String scope = token.image.trim();
    scopes.add(scope);
    {if (true) return scope;}
    throw new Error("Missing return statement in function");
  }

  final public EventBaseOperator Recurring_EG() throws ParseException {
  EventBaseOperator result;
    if (jj_2_14(10)) {
      result = PEG();
    } else if (jj_2_15(10)) {
      result = APEG();
    } else if (jj_2_16(10)) {
      result = ADEG();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_17(10)) {
      jj_consume_token(REPETITION);
      int rep = Integer.parseInt(token.image.trim().substring(1));
      ((ERecurringEG) result).setRepetition(rep);
    } else {
      ;
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public EventBaseOperator NonRecurring_EG() throws ParseException {
  EventBaseOperator result;
    if (jj_2_18(10)) {
      result = immediate_EG();
    } else if (jj_2_19(10)) {
      result = absolute_EG();
    } else if (jj_2_20(10)) {
      result = offset_EG();
    } else if (jj_2_21(10)) {
      result = relative_EG();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public EventBaseOperator immediate_EG() throws ParseException {
  EImmediateEG result = new EImmediateEG();
  String scope = "";
    jj_consume_token(immediate_EG);
    jj_consume_token(SENSOR_TYPE);
      result.setSensorType(token.image.trim());
    if (jj_2_22(10)) {
      scope = scope();
        result.setScope(scope);
    } else {
      ;
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public EventBaseOperator absolute_EG() throws ParseException {
  EAbsoluteEG result = new EAbsoluteEG();
  TimeExpression time;
  String scope = "";
    jj_consume_token(absolute_EG);
    jj_consume_token(SENSOR_TYPE);
      result.setSensorType(token.image.trim());
    time = timeExpression();
      result.setTimeExpression(time);
    if (jj_2_23(10)) {
      scope = scope();
        result.setScope(scope);
    } else {
      ;
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public EventBaseOperator offset_EG() throws ParseException {
  EOffsetEG result = new EOffsetEG();
  TimeExpression time;
  String scope = "";
    jj_consume_token(offset_EG);
    jj_consume_token(SENSOR_TYPE);
      result.setSensorType(token.image.trim());
    time = timeExpression();
      result.setTimeExpression(time);
    if (jj_2_24(10)) {
      scope = scope();
        result.setScope(scope);
    } else {
      ;
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public EventBaseOperator relative_EG() throws ParseException {
  ERelativeEG result = new ERelativeEG();
  EventBaseOperator source;
  TimeExpression time;
  String scope = null;
    jj_consume_token(relative_EG);
    jj_consume_token(SENSOR_TYPE);
      result.setSensorType(token.image.trim());
    time = timeExpression();
      result.setTimeExpression(time);
    if (jj_2_25(10)) {
      scope = scope();
    } else {
      ;
    }
    jj_consume_token(60);
    source = Terminate_Operand();
    jj_consume_token(61);
    result.setSource(source);
    if (scope == null) scope = "WORLD";
    result.setScope(scope);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public EPeriodicEG PEG() throws ParseException {
  EPeriodicEG result = new EPeriodicEG();
  TimeExpression periodic;
  String scope = "";
    jj_consume_token(PEG);
    jj_consume_token(SENSOR_TYPE);
      result.setSensorType(token.image.trim());
    jj_consume_token(62);
    periodic = timeExpression();
      result.setTime(periodic);
    if (jj_2_26(10)) {
      scope = scope();
        result.setScope(scope);
    } else {
      ;
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/**
* allowed formats:
* 	dd-MM-yyyy HH:mm:ss (absolute time)
*	HH:mm:ss			(time amount)
* 	mm:ss				( 	-nt-	)
*/
  final public TimeExpression timeExpression() throws ParseException {
  TimeExpression result = new TimeExpression();
  //int hour_minute = 0;
  //int minute_second = 0;
  int first = 0;
    jj_consume_token(POSITIVE_NUMBER);
    first = Integer.parseInt(token.image.trim());
    if (jj_2_28(10)) {
      jj_consume_token(63);
      result.minute = first;
      jj_consume_token(POSITIVE_NUMBER);
      result.second = Integer.parseInt(token.image.trim());
      if (jj_2_27(10)) {
        jj_consume_token(63);
        jj_consume_token(POSITIVE_NUMBER);
        result.hour = result.minute;
        result.minute = result.second;
        result.second = Integer.parseInt(token.image.trim());
      } else {
        ;
      }
    } else if (jj_2_29(10)) {
      jj_consume_token(SUB);
      result.day = first;
      jj_consume_token(POSITIVE_NUMBER);
      result.month = Integer.parseInt(token.image.trim());
      jj_consume_token(SUB);
      jj_consume_token(POSITIVE_NUMBER);
      result.year = Integer.parseInt(token.image.trim());
      jj_consume_token(POSITIVE_NUMBER);
      result.hour = Integer.parseInt(token.image.trim());
      jj_consume_token(63);
      jj_consume_token(POSITIVE_NUMBER);
      result.minute = Integer.parseInt(token.image.trim());
      jj_consume_token(63);
      jj_consume_token(POSITIVE_NUMBER);
      result.second = Integer.parseInt(token.image.trim());
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public TimeExpression timeExpression2(int first) throws ParseException {
  TimeExpression result = new TimeExpression();
    if (jj_2_31(10)) {
      jj_consume_token(63);
      result.minute = first;
      jj_consume_token(POSITIVE_NUMBER);
      result.second = Integer.parseInt(token.image.trim());
      if (jj_2_30(10)) {
        jj_consume_token(63);
        jj_consume_token(POSITIVE_NUMBER);
        result.hour = result.minute;
        result.minute = result.second;
        result.second = Integer.parseInt(token.image.trim());
      } else {
        ;
      }
    } else if (jj_2_32(10)) {
      jj_consume_token(SUB);
      result.day = first;
      jj_consume_token(POSITIVE_NUMBER);
      result.month = Integer.parseInt(token.image.trim());
      jj_consume_token(SUB);
      jj_consume_token(POSITIVE_NUMBER);
      result.year = Integer.parseInt(token.image.trim());
      jj_consume_token(POSITIVE_NUMBER);
      result.hour = Integer.parseInt(token.image.trim());
      jj_consume_token(63);
      jj_consume_token(POSITIVE_NUMBER);
      result.minute = Integer.parseInt(token.image.trim());
      jj_consume_token(63);
      jj_consume_token(POSITIVE_NUMBER);
      result.second = Integer.parseInt(token.image.trim());
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public EAperiodicPatternedEG APEG() throws ParseException {
  EAperiodicPatternedEG result = new EAperiodicPatternedEG();
  TimeExpression time;
  String scope = "";
    jj_consume_token(APEG);
    jj_consume_token(SENSOR_TYPE);
    result.setSensorType(token.image.trim());
    jj_consume_token(PATTERN);
    result.setPattern(token.image.trim());
    jj_consume_token(62);
    time = timeExpression();
    result.setTime(time);
    scope = scope();
    result.setScope(scope);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public EAperiodicDistributionEG ADEG() throws ParseException {
  EAperiodicDistributionEG result = new EAperiodicDistributionEG();
  //String function = null;  //List < Integer > params = new ArrayList < Integer > ();
  EDistributionFunction func = null;
  int tmp = 0;
  TimeExpression period_length = null;
  TimeExpression evaluation_frequency = null;
  String scope ="";
    jj_consume_token(ADEG);
    jj_consume_token(SENSOR_TYPE);
    result.setSensorType(token.image.trim());
    jj_consume_token(62);
    period_length = timeExpression();
    log.debug("parse time exp was successful");
    result.setPeriodInterval(period_length);
    jj_consume_token(64);
    evaluation_frequency = timeExpression();
    log.debug("2. parse time exp was successful");
    result.setEvaluationInterval(evaluation_frequency);
    if (jj_2_33(10)) {
      jj_consume_token(GAUSSIAN_DISTRIBUTION);
        log.debug("gaussian");
      jj_consume_token(M);
        EGausianFunction func_t = new EGausianFunction();
        func_t.setM(Integer.parseInt(token.image.trim().replace("m", "")));
        //SET M

      jj_consume_token(V);
        //SET V
        func_t.setV(Integer.parseInt(token.image.trim().replace("v", "")));
      jj_consume_token(A);
        func_t.setA(Integer.parseInt(token.image.trim().replace("a", "")));
        func = func_t;
    } else if (jj_2_34(10)) {
      jj_consume_token(CHI_SQUARE_DISTRIBUTION);
      jj_consume_token(K);
        EChiSquareFunction func_t = new EChiSquareFunction();
        func_t.setK(Integer.parseInt(token.image.trim().replace("k", "")));
        func = func_t;
    } else if (jj_2_35(10)) {
      jj_consume_token(PARETO_DISTRIBUTION);
      jj_consume_token(A);
        EParetoFunction func_t = new EParetoFunction();
        func_t.setA(Integer.parseInt(token.image.trim().replace("a", "")));
        func = func_t;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    result.setFunction(func);
    scope = scope();
    result.setScope(scope);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public ESimpleEF simpleEF() throws ParseException {
  ESimpleEF result = new ESimpleEF();
  List < sef_expression > sef_constraints = new ArrayList < sef_expression > ();
  sef_expression exp = null;
  EventBaseOperator source = null;
    jj_consume_token(SEF);
    jj_consume_token(65);
    if (jj_2_37(10)) {
      exp = sef_or();
      sef_constraints.add(exp);
      label_3:
      while (true) {
        if (jj_2_36(10)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(66);
        exp = sef_or();
        sef_constraints.add(exp);
      }
    } else {
      ;
    }
    jj_consume_token(67);
    jj_consume_token(60);
    source = Terminate_Operand();
    jj_consume_token(61);
    result.setSource(source);
    result.setConstraints(sef_constraints);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/* SIMPLE EVENT FILTER*/
/*ESimpleEF SEF() : {  ESimpleEF result = new ESimpleEF();  List < ESimpleFilterNestedConstraint > constraints = new ArrayList < ESimpleFilterNestedConstraint > ();
  ESimpleFilterNestedConstraint constr = null;  EventBaseOperator source = null;}{  < SEF > "["  [    constr = nestedConstraint()    {      if (constr != null)      {        constraints.add(constr);      }    }    (      "," constr = nestedConstraint()      {        if (constr != null)        {          constraints.add(constr);        }        else        { //TODO error
        }      }    )*  ]  "]" "(" source = Terminate_Operand() ")"  {    result.setSource(source);    result.setConstraints(constraints);    return result;  }}*/
  final public EventGenerator event_generator() throws ParseException {
  EventGenerator result;
    if (jj_2_38(10)) {
      result = PEG();
    } else if (jj_2_39(10)) {
      result = APEG();
    } else if (jj_2_40(10)) {
      result = ADEG();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public ESimpleFilterNestedConstraint nestedConstraint() throws ParseException {
  ESimpleFilterNestedConstraint result = new ESimpleFilterNestedConstraint();
  result.resetConstraints();
  ESimpleFilterConstraint cons = null;
    if (jj_2_42(10)) {
      cons = Constraint();
      result.addConstraints(cons);
      {if (true) return result;}
    } else if (jj_2_43(10)) {
      jj_consume_token(60);
      cons = Constraint();
      result.addConstraints(cons);
      jj_consume_token(61);
      label_4:
      while (true) {
        if (jj_2_41(10)) {
          ;
        } else {
          break label_4;
        }
        jj_consume_token(OR);
        jj_consume_token(60);
        cons = Constraint();
        result.addConstraints(cons);
        jj_consume_token(61);
      }
      {if (true) return result;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ESimpleFilterConstraint Constraint() throws ParseException {
  ESimpleFilterConstraint result = null;
  String type = null, value = null, op = null;
  boolean valueFirst = true;
    if (jj_2_48(10)) {
      jj_consume_token(EVENT_OUTPUT_TYPE);
        valueFirst = false;
        type = token.image.trim();
      if (jj_2_44(10)) {
        jj_consume_token(RELATIONAL);
      } else if (jj_2_45(10)) {
        jj_consume_token(EQUALITY);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
        op = token.image.trim();
      Event_output_value();
        value = token.image.trim();
    } else if (jj_2_49(10)) {
      Event_output_value();
        value = token.image.trim();
      if (jj_2_46(10)) {
        jj_consume_token(RELATIONAL);
      } else if (jj_2_47(10)) {
        jj_consume_token(EQUALITY);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
        op = token.image.trim();
      jj_consume_token(EVENT_OUTPUT_TYPE);
        type = token.image.trim();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    result = new ESimpleFilterConstraint(type + "_F", op, value, valueFirst);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String Event_output_value() throws ParseException {
  String result = null;
    if (jj_2_50(10)) {
      jj_consume_token(IDENTIFIER);
    } else if (jj_2_51(10)) {
      Number();
    } else if (jj_2_52(10)) {
      jj_consume_token(SENSOR_TYPE);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    result = token.image.trim();
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public EChangeEvent change_ec() throws ParseException {
  EChangeEvent result = null;
  EventBaseOperator source = null;
  TimeExpression time = null;
    if (jj_2_53(10)) {
      jj_consume_token(INCREASE_EC);
    } else if (jj_2_54(10)) {
      jj_consume_token(DECREASE_EC);
    } else if (jj_2_55(10)) {
      jj_consume_token(REMAIN_EC);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    result = new EChangeEvent(token.image.trim());
    log.debug("creating EChangeEvent " + token.image);
    time = timeExpression();
    result.setTime(time);
    jj_consume_token(POSITIVE_NUMBER);
    int threshold = Integer.parseInt(token.image.trim());
    result.setThreshold(threshold);
    jj_consume_token(60);
    source = Terminate_Operand();
    jj_consume_token(61);
    result.setSource(source);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public EProcessingEF min_ef() throws ParseException {
  EProcessingEF result = null;
  EventBaseOperator source = null;
  TimeExpression time = null;
    if (jj_2_56(10)) {
      jj_consume_token(MIN_COMPOSITION_EF);
    } else if (jj_2_57(10)) {
      jj_consume_token(MAX_COMPOSITION_EF);
    } else if (jj_2_58(10)) {
      jj_consume_token(COUNT_COMPOSITION_EF);
    } else if (jj_2_59(10)) {
      jj_consume_token(SUM_COMPOSITION_EF);
    } else if (jj_2_60(10)) {
      jj_consume_token(AVG_COMPOSITION_EF);
    } else if (jj_2_61(10)) {
      jj_consume_token(STDEV_COMPOSITION_EF);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    result = new EProcessingEF(token.image.trim());
    log.debug("creating EProcessingEF " + token.image);
    //< POSITIVE_NUMBER >
      time = timeExpression();
    //int window = Integer.parseInt(token.image.trim());
    result.setWindow(time);
    jj_consume_token(60);
    source = Terminate_Operand();
    jj_consume_token(61);
    result.setSource(source);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/*EComplexEF CEF() : {  EEvaluableExpression exp = null;  EComplexEF result = new EComplexEF();}{  "FFF" exp = OR_operator() // (policy())?
  //HIEN
  {    result.setCondition(exp);    return result;  }}void policy() :{}{  "/" < COMPOSITION_POLICY > "/" < EVICTION >}*/
  final public EEvaluableExpression OR_operator() throws ParseException {
  EEvaluableExpression result = null;
  String op = "OR";
  EEvaluableExpression left = null;
  EEvaluableExpression right = null;
    left = AND_operator();
    label_5:
    while (true) {
      if (jj_2_62(10)) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(OR);
      right = AND_operator();
      if (result != null) left = result;
      result = new EComplexFilterBinaryExpression(op, left, right);
    }
    if (result == null) result = left;
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public EEvaluableExpression AND_operator() throws ParseException {
  EEvaluableExpression result = null;
  EEvaluableExpression left = null;
  EEvaluableExpression right = null;
  String op = "AND";
    left = NOT_operator();
    label_6:
    while (true) {
      if (jj_2_63(10)) {
        ;
      } else {
        break label_6;
      }
      jj_consume_token(AND);
      right = NOT_operator();
      if (result != null) left = result;
      result = new EComplexFilterBinaryExpression(op, left, right);
    }
    if (result == null) result = left;
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public EEvaluableExpression NOT_operator() throws ParseException {
  String op = "NOT";
  EEvaluableExpression exp;
    if (jj_2_64(10)) {
      exp = Terminate_Operand();
    {if (true) return exp;}
    } else if (jj_2_65(10)) {
      jj_consume_token(NOT);
      exp = NOT_operator();
    {if (true) return new EComplexFilterUnaryExpression(op, exp);}
    } else if (jj_2_66(10)) {
      jj_consume_token(60);
      exp = OR_operator();
      jj_consume_token(61);
    {if (true) return exp;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public EventBaseOperator Terminate_Operand() throws ParseException {
  EventBaseOperator result = null;
    if (jj_2_67(10)) {
      jj_consume_token(IDENTIFIER);
      result = ChannelIDManager.variableMapping.get(token.image.trim());
    } else if (jj_2_68(10)) {
      result = eventbaseOperator();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public int Number() throws ParseException {
  int positive = 1;
    if (jj_2_69(10)) {
      jj_consume_token(SUB);
      positive = - 1;
    } else {
      ;
    }
    if (jj_2_70(10)) {
      jj_consume_token(BINARY);
    } else if (jj_2_71(10)) {
      jj_consume_token(POSITIVE_NUMBER);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return positive * Integer.parseInt(token.image.trim());}
    throw new Error("Missing return statement in function");
  }

/**************************Simple Event Filter ********************/
  final public void is_a_valid_sef_constraint() throws ParseException {
    sef_or();
    label_7:
    while (true) {
      if (jj_2_72(10)) {
        ;
      } else {
        break label_7;
      }
      jj_consume_token(66);
      sef_or();
    }
    jj_consume_token(0);
  }

  final public sef_expression test_sef_or() throws ParseException {
  sef_expression result;
    result = sef_or();
    jj_consume_token(0);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public sef_expression sef_or() throws ParseException {
  sef_expression result = null, left = null, right = null;
    result = sef_and();
    label_8:
    while (true) {
      if (jj_2_73(10)) {
        ;
      } else {
        break label_8;
      }
      jj_consume_token(OR);
      right = sef_and();
      left = result;
      result = new sef_or(left, right);
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public sef_expression sef_and() throws ParseException {
  sef_expression result = null, left = null, right = null;
    result = sef_equality();
    label_9:
    while (true) {
      if (jj_2_74(10)) {
        ;
      } else {
        break label_9;
      }
      jj_consume_token(AND);
      right = sef_equality();
      left = result;
      result = new sef_and(left, right);
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public sef_expression sef_equality() throws ParseException {
  sef_expression result = null, left = null, right = null;
    result = sef_relational();
    label_10:
    while (true) {
      if (jj_2_75(10)) {
        ;
      } else {
        break label_10;
      }
      jj_consume_token(EQUALITY);
      left = result;
      result = new sef_equality();
      ((sef_equality) result).setType(token.image.trim());
      right = sef_relational();
      ((sef_binary_exp) result).setLeft(left);
      ((sef_binary_exp) result).setRight(right);
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public sef_expression sef_relational() throws ParseException {
  sef_expression result = null, left = null, right = null;
    result = sef_additive();
    label_11:
    while (true) {
      if (jj_2_76(2)) {
        ;
      } else {
        break label_11;
      }
      jj_consume_token(RELATIONAL);
      left = result;
      result = new sef_equality();
      ((sef_equality) result).setType(token.image.trim());
      ((sef_binary_exp) result).setLeft(left);
      right = sef_additive();
      ((sef_binary_exp) result).setRight(right);
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public sef_expression sef_additive() throws ParseException {
  sef_expression result = null, left = null, right = null;
    result = sef_multiplicative();
    label_12:
    while (true) {
      if (jj_2_77(2)) {
        ;
      } else {
        break label_12;
      }
      if (jj_2_78(10)) {
        jj_consume_token(ADD);
        left = result;
        result = new sef_add();
      } else if (jj_2_79(10)) {
        jj_consume_token(SUB);
        left = result;
        result = new sef_sub();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = sef_multiplicative();
      ((sef_binary_exp) result).setLeft(left);
      ((sef_binary_exp) result).setRight(right);
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public sef_expression sef_multiplicative() throws ParseException {
  sef_expression result = null, left = null, right = null;
    result = sef_not();
    label_13:
    while (true) {
      if (jj_2_80(2)) {
        ;
      } else {
        break label_13;
      }
      jj_consume_token(MULTIPLICATIVE);
      left = result;
      if (token.image.equals("*")) result = new sef_mul();
      else if (token.image.equals("/")) result = new sef_div();
      else // "%"
      result = new sef_mod();
      ((sef_binary_exp) result).setLeft(left);
      right = sef_not();
      ((sef_binary_exp) result).setRight(right);
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public sef_expression sef_not() throws ParseException {
  sef_expression result = null, exp = null;
    if (jj_2_81(10)) {
      jj_consume_token(NOT);
      exp = sef_not();
    result = new sef_not();
    ((sef_not) result).setExp(exp);
    {if (true) return result;}
    } else if (jj_2_82(2)) {
      result = sef_primary();
    {if (true) return result;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public sef_expression sef_primary() throws ParseException {
  sef_expression result;
  //result = new sef_primary();
  TimeExpression timeexp;
  int number = 0;
  int second = 0;
  int third = 0;
    if (jj_2_85(10)) {
      jj_consume_token(BOOLEAN);
    result = new sef_primary(sef_primary.BOOLEAN, token.image.trim());
    {if (true) return result;}
    } else if (jj_2_86(10)) {
      jj_consume_token(EVENT_OUTPUT_TYPE);
    result = new sef_primary(sef_primary.EVENT_OUTPUT_TYPE, token.image.trim());
    {if (true) return result;}
    } else if (jj_2_87(10)) {
      jj_consume_token(SENSOR_TYPE);
    result = new sef_primary(sef_primary.SENSOR_TYPE, token.image.trim());
    {if (true) return result;}
    } else if (jj_2_88(10)) {
      jj_consume_token(SUB);
      jj_consume_token(POSITIVE_NUMBER);
    result = new sef_primary(sef_primary.NUMBER, "-" + token.image.trim());
    {if (true) return result;}
    } else if (jj_2_89(10)) {
      jj_consume_token(POSITIVE_NUMBER);
    result = new sef_primary(sef_primary.NUMBER, token.image.trim());
      if (jj_2_84(10)) {
        jj_consume_token(63);
        jj_consume_token(POSITIVE_NUMBER);
      second = Integer.parseInt(token.image);
      result = new sef_primary(sef_primary.NUMBER, (number*60+second) +"");
        if (jj_2_83(10)) {
          jj_consume_token(63);
          jj_consume_token(POSITIVE_NUMBER);
      third= Integer.parseInt(token.image);
      result = new sef_primary(sef_primary.NUMBER, ((number*60+second)*60+third)+"");
        } else {
          ;
        }
      } else {
        ;
      }
    {if (true) return result;}
    } else if (jj_2_90(10)) {
      jj_consume_token(IDENTIFIER);
    result = new sef_primary(sef_primary.STRING, token.image.trim());
    {if (true) return result;}
    } else if (jj_2_91(10)) {
      jj_consume_token(60);
      result = sef_or();
      jj_consume_token(61);
    {if (true) return result;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void sef_timestamp() throws ParseException {
    jj_consume_token(POSITIVE_NUMBER);
    jj_consume_token(63);
    jj_consume_token(POSITIVE_NUMBER);
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  private boolean jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(84, xla); }
  }

  private boolean jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(85, xla); }
  }

  private boolean jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(86, xla); }
  }

  private boolean jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(87, xla); }
  }

  private boolean jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(88, xla); }
  }

  private boolean jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(89, xla); }
  }

  private boolean jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(90, xla); }
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(APEG)) return true;
    if (jj_scan_token(SENSOR_TYPE)) return true;
    if (jj_scan_token(PATTERN)) return true;
    if (jj_scan_token(62)) return true;
    if (jj_3R_44()) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_62() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_33()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_62()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_76() {
    if (jj_scan_token(RELATIONAL)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_40()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_76()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_38() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(offset_EG)) return true;
    if (jj_scan_token(SENSOR_TYPE)) return true;
    if (jj_3R_44()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(K)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(A)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(M)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(I)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_75() {
    if (jj_scan_token(EQUALITY)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_scan_token(SUB)) return true;
    if (jj_scan_token(POSITIVE_NUMBER)) return true;
    if (jj_scan_token(SUB)) return true;
    if (jj_scan_token(POSITIVE_NUMBER)) return true;
    if (jj_scan_token(POSITIVE_NUMBER)) return true;
    if (jj_scan_token(63)) return true;
    if (jj_scan_token(POSITIVE_NUMBER)) return true;
    if (jj_scan_token(63)) return true;
    if (jj_scan_token(POSITIVE_NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_39()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_75()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(63)) return true;
    if (jj_scan_token(POSITIVE_NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(absolute_EG)) return true;
    if (jj_scan_token(SENSOR_TYPE)) return true;
    if (jj_3R_44()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_61() {
    if (jj_scan_token(STDEV_COMPOSITION_EF)) return true;
    return false;
  }

  private boolean jj_3_60() {
    if (jj_scan_token(AVG_COMPOSITION_EF)) return true;
    return false;
  }

  private boolean jj_3_91() {
    if (jj_scan_token(60)) return true;
    if (jj_3R_29()) return true;
    if (jj_scan_token(61)) return true;
    return false;
  }

  private boolean jj_3_74() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(63)) return true;
    if (jj_scan_token(POSITIVE_NUMBER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_59() {
    if (jj_scan_token(SUM_COMPOSITION_EF)) return true;
    return false;
  }

  private boolean jj_3_58() {
    if (jj_scan_token(COUNT_COMPOSITION_EF)) return true;
    return false;
  }

  private boolean jj_3_57() {
    if (jj_scan_token(MAX_COMPOSITION_EF)) return true;
    return false;
  }

  private boolean jj_3_56() {
    if (jj_scan_token(MIN_COMPOSITION_EF)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_38()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_74()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_90() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_56()) {
    jj_scanpos = xsp;
    if (jj_3_57()) {
    jj_scanpos = xsp;
    if (jj_3_58()) {
    jj_scanpos = xsp;
    if (jj_3_59()) {
    jj_scanpos = xsp;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3_61()) return true;
    }
    }
    }
    }
    }
    if (jj_3R_44()) return true;
    if (jj_scan_token(60)) return true;
    if (jj_3R_35()) return true;
    if (jj_scan_token(61)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_83() {
    if (jj_scan_token(63)) return true;
    if (jj_scan_token(POSITIVE_NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(immediate_EG)) return true;
    if (jj_scan_token(SENSOR_TYPE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_84() {
    if (jj_scan_token(63)) return true;
    if (jj_scan_token(POSITIVE_NUMBER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_83()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_73() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_scan_token(66)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_73()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_89() {
    if (jj_scan_token(POSITIVE_NUMBER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_84()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_3R_29()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_36()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(SEF)) return true;
    if (jj_scan_token(65)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) jj_scanpos = xsp;
    if (jj_scan_token(67)) return true;
    if (jj_scan_token(60)) return true;
    if (jj_3R_35()) return true;
    if (jj_scan_token(61)) return true;
    return false;
  }

  private boolean jj_3_88() {
    if (jj_scan_token(SUB)) return true;
    if (jj_scan_token(POSITIVE_NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_55() {
    if (jj_scan_token(REMAIN_EC)) return true;
    return false;
  }

  private boolean jj_3_54() {
    if (jj_scan_token(DECREASE_EC)) return true;
    return false;
  }

  private boolean jj_3_53() {
    if (jj_scan_token(INCREASE_EC)) return true;
    return false;
  }

  private boolean jj_3_87() {
    if (jj_scan_token(SENSOR_TYPE)) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(SUB)) return true;
    if (jj_scan_token(POSITIVE_NUMBER)) return true;
    if (jj_scan_token(SUB)) return true;
    if (jj_scan_token(POSITIVE_NUMBER)) return true;
    if (jj_scan_token(POSITIVE_NUMBER)) return true;
    if (jj_scan_token(63)) return true;
    if (jj_scan_token(POSITIVE_NUMBER)) return true;
    if (jj_scan_token(63)) return true;
    if (jj_scan_token(POSITIVE_NUMBER)) return true;
    return false;
  }

  private boolean jj_3_72() {
    if (jj_scan_token(66)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_86() {
    if (jj_scan_token(EVENT_OUTPUT_TYPE)) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(63)) return true;
    if (jj_scan_token(POSITIVE_NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_85()) {
    jj_scanpos = xsp;
    if (jj_3_86()) {
    jj_scanpos = xsp;
    if (jj_3_87()) {
    jj_scanpos = xsp;
    if (jj_3_88()) {
    jj_scanpos = xsp;
    if (jj_3_89()) {
    jj_scanpos = xsp;
    if (jj_3_90()) {
    jj_scanpos = xsp;
    if (jj_3_91()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_85() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(REPETITION)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_52() {
    if (jj_scan_token(SENSOR_TYPE)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3_17()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_71() {
    if (jj_scan_token(POSITIVE_NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(63)) return true;
    if (jj_scan_token(POSITIVE_NUMBER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_70() {
    if (jj_scan_token(BINARY)) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_scan_token(PARETO_DISTRIBUTION)) return true;
    if (jj_scan_token(A)) return true;
    return false;
  }

  private boolean jj_3_69() {
    if (jj_scan_token(SUB)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(POSITIVE_NUMBER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) return true;
    }
    return false;
  }

  private boolean jj_3_82() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_69()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_70()) {
    jj_scanpos = xsp;
    if (jj_3_71()) return true;
    }
    return false;
  }

  private boolean jj_3_34() {
    if (jj_scan_token(CHI_SQUARE_DISTRIBUTION)) return true;
    if (jj_scan_token(K)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(59)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_81()) {
    jj_scanpos = xsp;
    if (jj_3_82()) return true;
    }
    return false;
  }

  private boolean jj_3_81() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_scan_token(EQUALITY)) return true;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_scan_token(RELATIONAL)) return true;
    return false;
  }

  private boolean jj_3_68() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_67() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_67()) {
    jj_scanpos = xsp;
    if (jj_3_68()) return true;
    }
    return false;
  }

  private boolean jj_3_49() {
    if (jj_3R_31()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) return true;
    }
    if (jj_scan_token(EVENT_OUTPUT_TYPE)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_scan_token(GAUSSIAN_DISTRIBUTION)) return true;
    if (jj_scan_token(M)) return true;
    if (jj_scan_token(V)) return true;
    if (jj_scan_token(A)) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_scan_token(EQUALITY)) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_scan_token(RELATIONAL)) return true;
    return false;
  }

  private boolean jj_3_80() {
    if (jj_scan_token(MULTIPLICATIVE)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_66() {
    if (jj_scan_token(60)) return true;
    if (jj_3R_36()) return true;
    if (jj_scan_token(61)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_42()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_80()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_65() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(PEG)) return true;
    if (jj_scan_token(SENSOR_TYPE)) return true;
    if (jj_scan_token(62)) return true;
    if (jj_3R_44()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_64()) {
    jj_scanpos = xsp;
    if (jj_3_65()) {
    jj_scanpos = xsp;
    if (jj_3_66()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_64() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_scan_token(EVENT_OUTPUT_TYPE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) return true;
    }
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) return true;
    }
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(ADEG)) return true;
    if (jj_scan_token(SENSOR_TYPE)) return true;
    if (jj_scan_token(62)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(64)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_79() {
    if (jj_scan_token(SUB)) return true;
    return false;
  }

  private boolean jj_3_63() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_78() {
    if (jj_scan_token(ADD)) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_scan_token(OR)) return true;
    if (jj_scan_token(60)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(61)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_34()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_63()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(58)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_78()) {
    jj_scanpos = xsp;
    if (jj_3_79()) return true;
    }
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(relative_EG)) return true;
    if (jj_scan_token(SENSOR_TYPE)) return true;
    if (jj_3R_44()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) jj_scanpos = xsp;
    if (jj_scan_token(60)) return true;
    if (jj_3R_35()) return true;
    if (jj_scan_token(61)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_41()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_77()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_43() {
    if (jj_scan_token(60)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(61)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_41()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  /** Generated Token Manager. */
  public EventBaseScriptTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[91];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public EventBaseScript(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public EventBaseScript(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new EventBaseScriptTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public EventBaseScript(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new EventBaseScriptTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public EventBaseScript(EventBaseScriptTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(EventBaseScriptTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[68];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 68; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 91; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
            case 81: jj_3_82(); break;
            case 82: jj_3_83(); break;
            case 83: jj_3_84(); break;
            case 84: jj_3_85(); break;
            case 85: jj_3_86(); break;
            case 86: jj_3_87(); break;
            case 87: jj_3_88(); break;
            case 88: jj_3_89(); break;
            case 89: jj_3_90(); break;
            case 90: jj_3_91(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
